// Generated by CoffeeScript 1.10.0

/* jshint node:true */


/* jshint -W097 */

(function() {
  'use strict';
  var Promise, errors, headersHelper, login, logout, retsHttp, retsParsing;

  Promise = require('bluebird');

  retsParsing = require('./retsParsing');

  retsHttp = require('./retsHttp');

  headersHelper = require('./headers');

  errors = require('./errors');


  /*
   * Executes RETS login routine.
   */

  login = function(retsSession, client) {
    return retsHttp.callRetsMethod('login', Promise.promisify(retsSession), {}).then(function(retsResponse) {
      return new Promise(function(resolve, reject) {
        var gotData, headerCookie, headerCookies, headers, i, len, matches, retsParser, systemData, typeIsArray;
        headers = headersHelper.processHeaders(retsResponse.response.rawHeaders);
        if (client.settings.userAgentPassword && headers.setCookie) {
          typeIsArray = Array.isArray || function(value) {
            return {}.toString.call(value) === '[object Array]';
          };
          if (typeIsArray(headers.setCookie)) {
            headerCookies = headers.setCookie;
          } else {
            headerCookies = [headers.setCookie];
          }
          for (i = 0, len = headerCookies.length; i < len; i++) {
            headerCookie = headerCookies[i];
            matches = headerCookie.match(/RETS\-Session\-ID=([^;]+);/);
            if (matches) {
              client.settings.sessionId = matches[1];
              break;
            }
          }
        }
        systemData = {
          retsVersion: headers.retsVersion,
          retsServer: headers.server
        };
        retsParser = retsParsing.getSimpleParser('login', reject, headers);
        gotData = false;
        retsParser.parser.on('text', function(text) {
          var j, keyVal, keyVals, len1, results, split;
          if (retsParser.currElementName !== 'RETS-RESPONSE') {
            return;
          }
          gotData = true;
          keyVals = text.split('\r\n');
          results = [];
          for (j = 0, len1 = keyVals.length; j < len1; j++) {
            keyVal = keyVals[j];
            split = keyVal.split('=');
            if (split.length > 1) {
              results.push(systemData[split[0].trim()] = split[1].trim());
            } else {
              results.push(void 0);
            }
          }
          return results;
        });
        retsParser.parser.on('endElement', function(name) {
          if (name !== 'RETS') {
            return;
          }
          retsParser.finish();
          if (!gotData) {
            return reject(new errors.RetsProcessingError('login', 'Failed to parse data', headers));
          } else {
            return resolve(systemData);
          }
        });
        retsParser.parser.write(retsResponse.body);
        return retsParser.parser.end();
      });
    });
  };


  /*
   * Logouts RETS user
   */

  logout = function(retsSession) {
    return retsHttp.callRetsMethod('logout', Promise.promisify(retsSession), {});
  };

  module.exports = {
    login: login,
    logout: logout
  };

}).call(this);
